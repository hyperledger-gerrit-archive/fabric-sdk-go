#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
version: '2'

services:

  org1peer2:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_PEER_FIXTURE_IMAGE}:${ARCH}${ARCH_SEP}${FABRIC_PEER_FIXTURE_TAG}
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_LOGGING_PEER=debug
      # - CORE_LOGGING_GRPC=debug
      # - CORE_LOGGING_GOSSIP=debug
      # - CORE_CHAINCODE_STARTUPTIMEOUT=30s
      # - CORE_CHAINCODE_LOGGING_SHIM=debug
      # - CORE_CHAINCODE_LOGGING_LEVEL=debug
      - CORE_CHAINCODE_BUILDER=${FABRIC_DOCKER_REGISTRY}${FABRIC_BUILDER_FIXTURE_IMAGE}:${ARCH}${ARCH_SEP}${FABRIC_BUILDER_FIXTURE_TAG}
      - CORE_CHAINCODE_GOLANG_RUNTIME=${FABRIC_DOCKER_REGISTRY}${FABRIC_BASEOS_FIXTURE_IMAGE}:${BASE_ARCH}-${FABRIC_BASEOS_FIXTURE_TAG}
      ## the following setting redirects chaincode container logs to the peer container logs
      - CORE_VM_DOCKER_ATTACHSTDOUT=true
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7151
      - CORE_PEER_ADDRESS=0.0.0.0:7151
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.example.com:7052
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_EVENTS_ADDRESS=0.0.0.0:7153
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED
      - CORE_PEER_TLS_CLIENTROOTCAS_FILES
      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      - CORE_PEER_NETWORKID=${CORE_PEER_NETWORKID}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_default      
    #comment out logging.driver in order to render the debug logs 
    logging:
      driver: none 
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - "7151:7151"
      - "7153:7153"
    expose:
      - "7151"
      - "7052"
      - "7153"
    volumes:
        - /var/run/:/host/var/run/
        - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/msp/peer
        - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/tls/peer
        - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/mutual_tls:/etc/hyperledger/mutual_tls/peer
    networks:
      default:
        aliases:
          - peer1.org1.example.com
    depends_on:
      - org1peer1
      - orderer1
      - builder
      - golangruntime

  org2peer2:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_PEER_FIXTURE_IMAGE}:${ARCH}${ARCH_SEP}${FABRIC_PEER_FIXTURE_TAG}
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer1.org2.example.com
      # - CORE_LOGGING_PEER=debug
      # - CORE_LOGGING_GRPC=debug
      # - CORE_LOGGING_GOSSIP=debug
      # - CORE_CHAINCODE_STARTUPTIMEOUT=30s
      # - CORE_CHAINCODE_LOGGING_SHIM=debug
      # - CORE_CHAINCODE_LOGGING_LEVEL=debug
      - CORE_CHAINCODE_BUILDER=${FABRIC_DOCKER_REGISTRY}${FABRIC_BUILDER_FIXTURE_IMAGE}:${ARCH}${ARCH_SEP}${FABRIC_BUILDER_FIXTURE_TAG}
      - CORE_CHAINCODE_GOLANG_RUNTIME=${FABRIC_DOCKER_REGISTRY}${FABRIC_BASEOS_FIXTURE_IMAGE}:${BASE_ARCH}-${FABRIC_BASEOS_FIXTURE_TAG}
      ## the following setting redirects chaincode container logs to the peer container logs
      - CORE_VM_DOCKER_ATTACHSTDOUT=true
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_LISTENADDRESS=0.0.0.0:8151
      - CORE_PEER_ADDRESS=0.0.0.0:8151
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org2.example.com:7052
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:8051
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_EVENTS_ADDRESS=0.0.0.0:8153
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED
      - CORE_PEER_TLS_CLIENTROOTCAS_FILES
      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      - CORE_PEER_NETWORKID=${CORE_PEER_NETWORKID}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CORE_PEER_NETWORKID}_default     
    #comment out logging.driver in order to render the debug logs
    logging:
      driver: none  
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - "8151:8151"
      - "8153:8153"
    expose:
      - "8151"
      - "7052"
      - "8153"
    volumes:
        - /var/run/:/host/var/run/
        - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/msp/peer
        - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/tls/peer
        - ../fabric/${FABRIC_CRYPTOCONFIG_VERSION}/mutual_tls:/etc/hyperledger/mutual_tls/peer
    networks:
      default:
        aliases:
          - peer1.org2.example.com
    depends_on:
      - org2peer1
      - orderer1
      - builder
      - golangruntime

  integration-tests:
    image: ${FABRIC_DOCKER_REGISTRY}${FABRIC_BASEIMAGE_FIXTURE_IMAGE}:${BASE_ARCH}-${FABRIC_BASEIMAGE_FIXTURE_TAG}
    environment:
      - GO_TAGS
      - GO_TESTFLAGS
      - FABRIC_SDKGO_CODELEVEL_TAG
      - FABRIC_SDKGO_CODELEVEL_VER
      - FABRIC_SDK_SECONDPEER=true
    volumes:
      - ../../../:/opt/gopath/src/github.com/hyperledger/fabric-sdk-go
    command: /opt/gopath/src/github.com/hyperledger/fabric-sdk-go/test/scripts/integration.sh
    depends_on:
      - org1ca1
      - org2ca1
      - org1peer1
      - org2peer1
      - org1peer2
      - org2peer2
      - orderer1
      - builder
