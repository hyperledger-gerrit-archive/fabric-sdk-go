// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/hyperledger/fabric-sdk-go/api/apiconfig (interfaces: Config)

package mock_apiconfig

import (
	tls "crypto/tls"
	x509 "crypto/x509"
	time "time"

	gomock "github.com/golang/mock/gomock"
	apiconfig "github.com/hyperledger/fabric-sdk-go/api/apiconfig"
)

// MockConfig interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *_MockConfigRecorder
}

// Recorder for MockConfig (not exported)
type _MockConfigRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &_MockConfigRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockConfig) EXPECT() *_MockConfigRecorder {
	return _m.recorder
}

// CAClientCertPath mocks base method
func (_m *MockConfig) CAClientCertPath(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "CAClientCertPath", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAClientCertPath indicates an expected call of CAClientCertPath
func (_mr *_MockConfigRecorder) CAClientCertPath(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CAClientCertPath", arg0)
}

// CAClientCertPem mocks base method
func (_m *MockConfig) CAClientCertPem(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "CAClientCertPem", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAClientCertPem indicates an expected call of CAClientCertPem
func (_mr *_MockConfigRecorder) CAClientCertPem(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CAClientCertPem", arg0)
}

// CAClientKeyPath mocks base method
func (_m *MockConfig) CAClientKeyPath(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "CAClientKeyPath", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAClientKeyPath indicates an expected call of CAClientKeyPath
func (_mr *_MockConfigRecorder) CAClientKeyPath(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CAClientKeyPath", arg0)
}

// CAClientKeyPem mocks base method
func (_m *MockConfig) CAClientKeyPem(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "CAClientKeyPem", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAClientKeyPem indicates an expected call of CAClientKeyPem
func (_mr *_MockConfigRecorder) CAClientKeyPem(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CAClientKeyPem", arg0)
}

// CAConfig mocks base method
func (_m *MockConfig) CAConfig(_param0 string) (*apiconfig.CAConfig, error) {
	ret := _m.ctrl.Call(_m, "CAConfig", _param0)
	ret0, _ := ret[0].(*apiconfig.CAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAConfig indicates an expected call of CAConfig
func (_mr *_MockConfigRecorder) CAConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CAConfig", arg0)
}

// CAKeyStorePath mocks base method
func (_m *MockConfig) CAKeyStorePath() string {
	ret := _m.ctrl.Call(_m, "CAKeyStorePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// CAKeyStorePath indicates an expected call of CAKeyStorePath
func (_mr *_MockConfigRecorder) CAKeyStorePath() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CAKeyStorePath")
}

// CAServerCertPaths mocks base method
func (_m *MockConfig) CAServerCertPaths(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "CAServerCertPaths", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAServerCertPaths indicates an expected call of CAServerCertPaths
func (_mr *_MockConfigRecorder) CAServerCertPaths(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CAServerCertPaths", arg0)
}

// CAServerCertPems mocks base method
func (_m *MockConfig) CAServerCertPems(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "CAServerCertPems", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAServerCertPems indicates an expected call of CAServerCertPems
func (_mr *_MockConfigRecorder) CAServerCertPems(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CAServerCertPems", arg0)
}

// ChannelConfig mocks base method
func (_m *MockConfig) ChannelConfig(_param0 string) (*apiconfig.ChannelConfig, error) {
	ret := _m.ctrl.Call(_m, "ChannelConfig", _param0)
	ret0, _ := ret[0].(*apiconfig.ChannelConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelConfig indicates an expected call of ChannelConfig
func (_mr *_MockConfigRecorder) ChannelConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChannelConfig", arg0)
}

// ChannelOrderers mocks base method
func (_m *MockConfig) ChannelOrderers(_param0 string) ([]apiconfig.OrdererConfig, error) {
	ret := _m.ctrl.Call(_m, "ChannelOrderers", _param0)
	ret0, _ := ret[0].([]apiconfig.OrdererConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelOrderers indicates an expected call of ChannelOrderers
func (_mr *_MockConfigRecorder) ChannelOrderers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChannelOrderers", arg0)
}

// ChannelPeers mocks base method
func (_m *MockConfig) ChannelPeers(_param0 string) ([]apiconfig.ChannelPeer, error) {
	ret := _m.ctrl.Call(_m, "ChannelPeers", _param0)
	ret0, _ := ret[0].([]apiconfig.ChannelPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelPeers indicates an expected call of ChannelPeers
func (_mr *_MockConfigRecorder) ChannelPeers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChannelPeers", arg0)
}

// Client mocks base method
func (_m *MockConfig) Client() (*apiconfig.ClientConfig, error) {
	ret := _m.ctrl.Call(_m, "Client")
	ret0, _ := ret[0].(*apiconfig.ClientConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Client indicates an expected call of Client
func (_mr *_MockConfigRecorder) Client() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Client")
}

// CryptoConfigPath mocks base method
func (_m *MockConfig) CryptoConfigPath() string {
	ret := _m.ctrl.Call(_m, "CryptoConfigPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// CryptoConfigPath indicates an expected call of CryptoConfigPath
func (_mr *_MockConfigRecorder) CryptoConfigPath() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CryptoConfigPath")
}

// Ephemeral mocks base method
func (_m *MockConfig) Ephemeral() bool {
	ret := _m.ctrl.Call(_m, "Ephemeral")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ephemeral indicates an expected call of Ephemeral
func (_mr *_MockConfigRecorder) Ephemeral() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ephemeral")
}

// IsSecurityEnabled mocks base method
func (_m *MockConfig) IsSecurityEnabled() bool {
	ret := _m.ctrl.Call(_m, "IsSecurityEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSecurityEnabled indicates an expected call of IsSecurityEnabled
func (_mr *_MockConfigRecorder) IsSecurityEnabled() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsSecurityEnabled")
}

// KeyStorePath mocks base method
func (_m *MockConfig) KeyStorePath() string {
	ret := _m.ctrl.Call(_m, "KeyStorePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// KeyStorePath indicates an expected call of KeyStorePath
func (_mr *_MockConfigRecorder) KeyStorePath() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyStorePath")
}

// MspID mocks base method
func (_m *MockConfig) MspID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "MspID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MspID indicates an expected call of MspID
func (_mr *_MockConfigRecorder) MspID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MspID", arg0)
}

// NetworkConfig mocks base method
func (_m *MockConfig) NetworkConfig() (*apiconfig.NetworkConfig, error) {
	ret := _m.ctrl.Call(_m, "NetworkConfig")
	ret0, _ := ret[0].(*apiconfig.NetworkConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConfig indicates an expected call of NetworkConfig
func (_mr *_MockConfigRecorder) NetworkConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NetworkConfig")
}

// NetworkPeers mocks base method
func (_m *MockConfig) NetworkPeers() ([]apiconfig.NetworkPeer, error) {
	ret := _m.ctrl.Call(_m, "NetworkPeers")
	ret0, _ := ret[0].([]apiconfig.NetworkPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkPeers indicates an expected call of NetworkPeers
func (_mr *_MockConfigRecorder) NetworkPeers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NetworkPeers")
}

// OrdererConfig mocks base method
func (_m *MockConfig) OrdererConfig(_param0 string) (*apiconfig.OrdererConfig, error) {
	ret := _m.ctrl.Call(_m, "OrdererConfig", _param0)
	ret0, _ := ret[0].(*apiconfig.OrdererConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdererConfig indicates an expected call of OrdererConfig
func (_mr *_MockConfigRecorder) OrdererConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OrdererConfig", arg0)
}

// OrderersConfig mocks base method
func (_m *MockConfig) OrderersConfig() ([]apiconfig.OrdererConfig, error) {
	ret := _m.ctrl.Call(_m, "OrderersConfig")
	ret0, _ := ret[0].([]apiconfig.OrdererConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderersConfig indicates an expected call of OrderersConfig
func (_mr *_MockConfigRecorder) OrderersConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OrderersConfig")
}

// PeerConfig mocks base method
func (_m *MockConfig) PeerConfig(_param0 string, _param1 string) (*apiconfig.PeerConfig, error) {
	ret := _m.ctrl.Call(_m, "PeerConfig", _param0, _param1)
	ret0, _ := ret[0].(*apiconfig.PeerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerConfig indicates an expected call of PeerConfig
func (_mr *_MockConfigRecorder) PeerConfig(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PeerConfig", arg0, arg1)
}

// PeerMspID mocks base method
func (_m *MockConfig) PeerMspID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "PeerMspID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerMspID indicates an expected call of PeerMspID
func (_mr *_MockConfigRecorder) PeerMspID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PeerMspID", arg0)
}

// PeersConfig mocks base method
func (_m *MockConfig) PeersConfig(_param0 string) ([]apiconfig.PeerConfig, error) {
	ret := _m.ctrl.Call(_m, "PeersConfig", _param0)
	ret0, _ := ret[0].([]apiconfig.PeerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeersConfig indicates an expected call of PeersConfig
func (_mr *_MockConfigRecorder) PeersConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PeersConfig", arg0)
}

// RandomOrdererConfig mocks base method
func (_m *MockConfig) RandomOrdererConfig() (*apiconfig.OrdererConfig, error) {
	ret := _m.ctrl.Call(_m, "RandomOrdererConfig")
	ret0, _ := ret[0].(*apiconfig.OrdererConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomOrdererConfig indicates an expected call of RandomOrdererConfig
func (_mr *_MockConfigRecorder) RandomOrdererConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RandomOrdererConfig")
}

// SecurityAlgorithm mocks base method
func (_m *MockConfig) SecurityAlgorithm() string {
	ret := _m.ctrl.Call(_m, "SecurityAlgorithm")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecurityAlgorithm indicates an expected call of SecurityAlgorithm
func (_mr *_MockConfigRecorder) SecurityAlgorithm() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SecurityAlgorithm")
}

// SecurityLevel mocks base method
func (_m *MockConfig) SecurityLevel() int {
	ret := _m.ctrl.Call(_m, "SecurityLevel")
	ret0, _ := ret[0].(int)
	return ret0
}

// SecurityLevel indicates an expected call of SecurityLevel
func (_mr *_MockConfigRecorder) SecurityLevel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SecurityLevel")
}

// SecurityProvider mocks base method
func (_m *MockConfig) SecurityProvider() string {
	ret := _m.ctrl.Call(_m, "SecurityProvider")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecurityProvider indicates an expected call of SecurityProvider
func (_mr *_MockConfigRecorder) SecurityProvider() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SecurityProvider")
}

// SecurityProviderLabel mocks base method
func (_m *MockConfig) SecurityProviderLabel() string {
	ret := _m.ctrl.Call(_m, "SecurityProviderLabel")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecurityProviderLabel indicates an expected call of SecurityProviderLabel
func (_mr *_MockConfigRecorder) SecurityProviderLabel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SecurityProviderLabel")
}

//SecurityProviderLibPath provider lib path
func (_m *MockConfig) SecurityProviderLibPath() string {
	ret := _m.ctrl.Call(_m, "SecurityProviderLibPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecurityProviderLibPath indicates an expected call of SecurityProviderLibPath
func (_mr *_MockConfigRecorder) SecurityProviderLibPath() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SecurityProviderLibPath")
}

// SecurityProviderPin mocks base method
func (_m *MockConfig) SecurityProviderPin() string {
	ret := _m.ctrl.Call(_m, "SecurityProviderPin")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecurityProviderPin indicates an expected call of SecurityProviderPin
func (_mr *_MockConfigRecorder) SecurityProviderPin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SecurityProviderPin")
}

// SetTLSCACertPool mocks base method
func (_m *MockConfig) SetTLSCACertPool(_param0 *x509.CertPool) {
	_m.ctrl.Call(_m, "SetTLSCACertPool", _param0)
}

// SetTLSCACertPool indicates an expected call of SetTLSCACertPool
func (_mr *_MockConfigRecorder) SetTLSCACertPool(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTLSCACertPool", arg0)
}

// SoftVerify mocks base method
func (_m *MockConfig) SoftVerify() bool {
	ret := _m.ctrl.Call(_m, "SoftVerify")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SoftVerify indicates an expected call of SoftVerify
func (_mr *_MockConfigRecorder) SoftVerify() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SoftVerify")
}

// TLSCACertPool mocks base method
func (_m *MockConfig) TLSCACertPool(_param0 ...*x509.Certificate) (*x509.CertPool, error) {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TLSCACertPool", _s...)
	ret0, _ := ret[0].(*x509.CertPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TLSCACertPool indicates an expected call of TLSCACertPool
func (_mr *_MockConfigRecorder) TLSCACertPool(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TLSCACertPool", arg0...)
}

// TLSClientCerts mocks base method
func (_m *MockConfig) TLSClientCerts() ([]tls.Certificate, error) {
	ret := _m.ctrl.Call(_m, "TLSClientCerts")
	ret0, _ := ret[0].([]tls.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TLSClientCerts indicates an expected call of TLSClientCerts
func (_mr *_MockConfigRecorder) TLSClientCerts() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TLSClientCerts")
}

// TimeoutOrDefault mocks base method
func (_m *MockConfig) TimeoutOrDefault(_param0 apiconfig.TimeoutType) time.Duration {
	ret := _m.ctrl.Call(_m, "TimeoutOrDefault", _param0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TimeoutOrDefault indicates an expected call of TimeoutOrDefault
func (_mr *_MockConfigRecorder) TimeoutOrDefault(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TimeoutOrDefault", arg0)
}
