// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-sdk-go/pkg/context/api/msp (interfaces: IdentityManager,Providers)

// Package mock_msp is a generated GoMock package.
package mock_msp

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	msp "github.com/hyperledger/fabric-sdk-go/pkg/common/providers/msp"
)

// MockIdentityManager is a mock of IdentityManager interface
type MockIdentityManager struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagerMockRecorder
}

// MockIdentityManagerMockRecorder is the mock recorder for MockIdentityManager
type MockIdentityManagerMockRecorder struct {
	mock *MockIdentityManager
}

// NewMockIdentityManager creates a new mock instance
func NewMockIdentityManager(ctrl *gomock.Controller) *MockIdentityManager {
	mock := &MockIdentityManager{ctrl: ctrl}
	mock.recorder = &MockIdentityManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityManager) EXPECT() *MockIdentityManagerMockRecorder {
	return m.recorder
}

// GetSigningIdentity mocks base method
func (m *MockIdentityManager) GetSigningIdentity(arg0 string) (msp.SigningIdentity, error) {
	ret := m.ctrl.Call(m, "GetSigningIdentity", arg0)
	ret0, _ := ret[0].(msp.SigningIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSigningIdentity indicates an expected call of GetSigningIdentity
func (mr *MockIdentityManagerMockRecorder) GetSigningIdentity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningIdentity", reflect.TypeOf((*MockIdentityManager)(nil).GetSigningIdentity), arg0)
}

// MockProviders is a mock of Providers interface
type MockProviders struct {
	ctrl     *gomock.Controller
	recorder *MockProvidersMockRecorder
}

// MockProvidersMockRecorder is the mock recorder for MockProviders
type MockProvidersMockRecorder struct {
	mock *MockProviders
}

// NewMockProviders creates a new mock instance
func NewMockProviders(ctrl *gomock.Controller) *MockProviders {
	mock := &MockProviders{ctrl: ctrl}
	mock.recorder = &MockProvidersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviders) EXPECT() *MockProvidersMockRecorder {
	return m.recorder
}

// IdentityManager mocks base method
func (m *MockProviders) IdentityManager(arg0 string) (msp.IdentityManager, bool) {
	ret := m.ctrl.Call(m, "IdentityManager", arg0)
	ret0, _ := ret[0].(msp.IdentityManager)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IdentityManager indicates an expected call of IdentityManager
func (mr *MockProvidersMockRecorder) IdentityManager(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityManager", reflect.TypeOf((*MockProviders)(nil).IdentityManager), arg0)
}

// UserStore mocks base method
func (m *MockProviders) UserStore() msp.UserStore {
	ret := m.ctrl.Call(m, "UserStore")
	ret0, _ := ret[0].(msp.UserStore)
	return ret0
}

// UserStore indicates an expected call of UserStore
func (mr *MockProvidersMockRecorder) UserStore() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStore", reflect.TypeOf((*MockProviders)(nil).UserStore))
}
