// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-sdk-go/pkg/common/providers/msp (interfaces: IdentityConfig,IdentityManager,Providers)

// Package mockmsp is a generated GoMock package.
package mockmsp

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	msp "github.com/hyperledger/fabric-sdk-go/pkg/common/providers/msp"
)

// MockIdentityConfig is a mock of IdentityConfig interface
type MockIdentityConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityConfigMockRecorder
}

// MockIdentityConfigMockRecorder is the mock recorder for MockIdentityConfig
type MockIdentityConfigMockRecorder struct {
	mock *MockIdentityConfig
}

// NewMockIdentityConfig creates a new mock instance
func NewMockIdentityConfig(ctrl *gomock.Controller) *MockIdentityConfig {
	mock := &MockIdentityConfig{ctrl: ctrl}
	mock.recorder = &MockIdentityConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityConfig) EXPECT() *MockIdentityConfigMockRecorder {
	return m.recorder
}

// CAClientCertPath mocks base method
func (m *MockIdentityConfig) CAClientCertPath(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "CAClientCertPath", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAClientCertPath indicates an expected call of CAClientCertPath
func (mr *MockIdentityConfigMockRecorder) CAClientCertPath(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAClientCertPath", reflect.TypeOf((*MockIdentityConfig)(nil).CAClientCertPath), arg0)
}

// CAClientCertPem mocks base method
func (m *MockIdentityConfig) CAClientCertPem(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "CAClientCertPem", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAClientCertPem indicates an expected call of CAClientCertPem
func (mr *MockIdentityConfigMockRecorder) CAClientCertPem(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAClientCertPem", reflect.TypeOf((*MockIdentityConfig)(nil).CAClientCertPem), arg0)
}

// CAClientKeyPath mocks base method
func (m *MockIdentityConfig) CAClientKeyPath(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "CAClientKeyPath", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAClientKeyPath indicates an expected call of CAClientKeyPath
func (mr *MockIdentityConfigMockRecorder) CAClientKeyPath(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAClientKeyPath", reflect.TypeOf((*MockIdentityConfig)(nil).CAClientKeyPath), arg0)
}

// CAClientKeyPem mocks base method
func (m *MockIdentityConfig) CAClientKeyPem(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "CAClientKeyPem", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAClientKeyPem indicates an expected call of CAClientKeyPem
func (mr *MockIdentityConfigMockRecorder) CAClientKeyPem(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAClientKeyPem", reflect.TypeOf((*MockIdentityConfig)(nil).CAClientKeyPem), arg0)
}

// CAConfig mocks base method
func (m *MockIdentityConfig) CAConfig(arg0 string) (*msp.CAConfig, error) {
	ret := m.ctrl.Call(m, "CAConfig", arg0)
	ret0, _ := ret[0].(*msp.CAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAConfig indicates an expected call of CAConfig
func (mr *MockIdentityConfigMockRecorder) CAConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAConfig", reflect.TypeOf((*MockIdentityConfig)(nil).CAConfig), arg0)
}

// CAKeyStorePath mocks base method
func (m *MockIdentityConfig) CAKeyStorePath() string {
	ret := m.ctrl.Call(m, "CAKeyStorePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// CAKeyStorePath indicates an expected call of CAKeyStorePath
func (mr *MockIdentityConfigMockRecorder) CAKeyStorePath() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAKeyStorePath", reflect.TypeOf((*MockIdentityConfig)(nil).CAKeyStorePath))
}

// CAServerCertPaths mocks base method
func (m *MockIdentityConfig) CAServerCertPaths(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "CAServerCertPaths", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAServerCertPaths indicates an expected call of CAServerCertPaths
func (mr *MockIdentityConfigMockRecorder) CAServerCertPaths(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAServerCertPaths", reflect.TypeOf((*MockIdentityConfig)(nil).CAServerCertPaths), arg0)
}

// CAServerCertPems mocks base method
func (m *MockIdentityConfig) CAServerCertPems(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "CAServerCertPems", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CAServerCertPems indicates an expected call of CAServerCertPems
func (mr *MockIdentityConfigMockRecorder) CAServerCertPems(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAServerCertPems", reflect.TypeOf((*MockIdentityConfig)(nil).CAServerCertPems), arg0)
}

// Client mocks base method
func (m *MockIdentityConfig) Client() (*msp.ClientConfig, error) {
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*msp.ClientConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Client indicates an expected call of Client
func (mr *MockIdentityConfigMockRecorder) Client() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockIdentityConfig)(nil).Client))
}

// CredentialStorePath mocks base method
func (m *MockIdentityConfig) CredentialStorePath() string {
	ret := m.ctrl.Call(m, "CredentialStorePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// CredentialStorePath indicates an expected call of CredentialStorePath
func (mr *MockIdentityConfigMockRecorder) CredentialStorePath() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialStorePath", reflect.TypeOf((*MockIdentityConfig)(nil).CredentialStorePath))
}

// MockIdentityManager is a mock of IdentityManager interface
type MockIdentityManager struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagerMockRecorder
}

// MockIdentityManagerMockRecorder is the mock recorder for MockIdentityManager
type MockIdentityManagerMockRecorder struct {
	mock *MockIdentityManager
}

// NewMockIdentityManager creates a new mock instance
func NewMockIdentityManager(ctrl *gomock.Controller) *MockIdentityManager {
	mock := &MockIdentityManager{ctrl: ctrl}
	mock.recorder = &MockIdentityManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityManager) EXPECT() *MockIdentityManagerMockRecorder {
	return m.recorder
}

// GetSigningIdentity mocks base method
func (m *MockIdentityManager) GetSigningIdentity(arg0 string) (msp.SigningIdentity, error) {
	ret := m.ctrl.Call(m, "GetSigningIdentity", arg0)
	ret0, _ := ret[0].(msp.SigningIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSigningIdentity indicates an expected call of GetSigningIdentity
func (mr *MockIdentityManagerMockRecorder) GetSigningIdentity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningIdentity", reflect.TypeOf((*MockIdentityManager)(nil).GetSigningIdentity), arg0)
}

// MockProviders is a mock of Providers interface
type MockProviders struct {
	ctrl     *gomock.Controller
	recorder *MockProvidersMockRecorder
}

// MockProvidersMockRecorder is the mock recorder for MockProviders
type MockProvidersMockRecorder struct {
	mock *MockProviders
}

// NewMockProviders creates a new mock instance
func NewMockProviders(ctrl *gomock.Controller) *MockProviders {
	mock := &MockProviders{ctrl: ctrl}
	mock.recorder = &MockProvidersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviders) EXPECT() *MockProvidersMockRecorder {
	return m.recorder
}

// IdentityConfig mocks base method
func (m *MockProviders) IdentityConfig() msp.IdentityConfig {
	ret := m.ctrl.Call(m, "IdentityConfig")
	ret0, _ := ret[0].(msp.IdentityConfig)
	return ret0
}

// IdentityConfig indicates an expected call of IdentityConfig
func (mr *MockProvidersMockRecorder) IdentityConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityConfig", reflect.TypeOf((*MockProviders)(nil).IdentityConfig))
}

// IdentityManager mocks base method
func (m *MockProviders) IdentityManager(arg0 string) (msp.IdentityManager, bool) {
	ret := m.ctrl.Call(m, "IdentityManager", arg0)
	ret0, _ := ret[0].(msp.IdentityManager)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IdentityManager indicates an expected call of IdentityManager
func (mr *MockProvidersMockRecorder) IdentityManager(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityManager", reflect.TypeOf((*MockProviders)(nil).IdentityManager), arg0)
}

// UserStore mocks base method
func (m *MockProviders) UserStore() msp.UserStore {
	ret := m.ctrl.Call(m, "UserStore")
	ret0, _ := ret[0].(msp.UserStore)
	return ret0
}

// UserStore indicates an expected call of UserStore
func (mr *MockProvidersMockRecorder) UserStore() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserStore", reflect.TypeOf((*MockProviders)(nil).UserStore))
}
