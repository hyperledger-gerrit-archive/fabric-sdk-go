// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-sdk-go/pkg/common/providers/fab (interfaces: EndpointConfig,ProposalProcessor,Providers)

package mockfab

import (
	context "context"
	tls "crypto/tls"
	x509 "crypto/x509"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	fab "github.com/hyperledger/fabric-sdk-go/pkg/common/providers/fab"
)

// MockEndpointConfig is a mock of EndpointConfig interface
type MockEndpointConfig struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointConfigMockRecorder
}

// MockEndpointConfigMockRecorder is the mock recorder for MockEndpointConfig
type MockEndpointConfigMockRecorder struct {
	mock *MockEndpointConfig
}

// NewMockEndpointConfig creates a new mock instance
func NewMockEndpointConfig(ctrl *gomock.Controller) *MockEndpointConfig {
	mock := &MockEndpointConfig{ctrl: ctrl}
	mock.recorder = &MockEndpointConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEndpointConfig) EXPECT() *MockEndpointConfigMockRecorder {
	return _m.recorder
}

// ChannelConfig mocks base method
func (_m *MockEndpointConfig) ChannelConfig(_param0 string) (*fab.ChannelNetworkConfig, error) {
	ret := _m.ctrl.Call(_m, "ChannelConfig", _param0)
	ret0, _ := ret[0].(*fab.ChannelNetworkConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelConfig indicates an expected call of ChannelConfig
func (_mr *MockEndpointConfigMockRecorder) ChannelConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ChannelConfig", reflect.TypeOf((*MockEndpointConfig)(nil).ChannelConfig), arg0)
}

// ChannelOrderers mocks base method
func (_m *MockEndpointConfig) ChannelOrderers(_param0 string) ([]fab.OrdererConfig, error) {
	ret := _m.ctrl.Call(_m, "ChannelOrderers", _param0)
	ret0, _ := ret[0].([]fab.OrdererConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelOrderers indicates an expected call of ChannelOrderers
func (_mr *MockEndpointConfigMockRecorder) ChannelOrderers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ChannelOrderers", reflect.TypeOf((*MockEndpointConfig)(nil).ChannelOrderers), arg0)
}

// ChannelPeers mocks base method
func (_m *MockEndpointConfig) ChannelPeers(_param0 string) ([]fab.ChannelPeer, error) {
	ret := _m.ctrl.Call(_m, "ChannelPeers", _param0)
	ret0, _ := ret[0].([]fab.ChannelPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelPeers indicates an expected call of ChannelPeers
func (_mr *MockEndpointConfigMockRecorder) ChannelPeers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ChannelPeers", reflect.TypeOf((*MockEndpointConfig)(nil).ChannelPeers), arg0)
}

// CryptoConfigPath mocks base method
func (_m *MockEndpointConfig) CryptoConfigPath() string {
	ret := _m.ctrl.Call(_m, "CryptoConfigPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// CryptoConfigPath indicates an expected call of CryptoConfigPath
func (_mr *MockEndpointConfigMockRecorder) CryptoConfigPath() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CryptoConfigPath", reflect.TypeOf((*MockEndpointConfig)(nil).CryptoConfigPath))
}

// EventServiceType mocks base method
func (_m *MockEndpointConfig) EventServiceType() fab.EventServiceType {
	ret := _m.ctrl.Call(_m, "EventServiceType")
	ret0, _ := ret[0].(fab.EventServiceType)
	return ret0
}

// EventServiceType indicates an expected call of EventServiceType
func (_mr *MockEndpointConfigMockRecorder) EventServiceType() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EventServiceType", reflect.TypeOf((*MockEndpointConfig)(nil).EventServiceType))
}

// MSPID mocks base method
func (_m *MockEndpointConfig) MSPID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "MSPID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MSPID indicates an expected call of MSPID
func (_mr *MockEndpointConfigMockRecorder) MSPID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MSPID", reflect.TypeOf((*MockEndpointConfig)(nil).MSPID), arg0)
}

// NetworkConfig mocks base method
func (_m *MockEndpointConfig) NetworkConfig() (*fab.NetworkConfig, error) {
	ret := _m.ctrl.Call(_m, "NetworkConfig")
	ret0, _ := ret[0].(*fab.NetworkConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkConfig indicates an expected call of NetworkConfig
func (_mr *MockEndpointConfigMockRecorder) NetworkConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkConfig", reflect.TypeOf((*MockEndpointConfig)(nil).NetworkConfig))
}

// NetworkPeers mocks base method
func (_m *MockEndpointConfig) NetworkPeers() ([]fab.NetworkPeer, error) {
	ret := _m.ctrl.Call(_m, "NetworkPeers")
	ret0, _ := ret[0].([]fab.NetworkPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkPeers indicates an expected call of NetworkPeers
func (_mr *MockEndpointConfigMockRecorder) NetworkPeers() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkPeers", reflect.TypeOf((*MockEndpointConfig)(nil).NetworkPeers))
}

// OrdererConfig mocks base method
func (_m *MockEndpointConfig) OrdererConfig(_param0 string) (*fab.OrdererConfig, error) {
	ret := _m.ctrl.Call(_m, "OrdererConfig", _param0)
	ret0, _ := ret[0].(*fab.OrdererConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdererConfig indicates an expected call of OrdererConfig
func (_mr *MockEndpointConfigMockRecorder) OrdererConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OrdererConfig", reflect.TypeOf((*MockEndpointConfig)(nil).OrdererConfig), arg0)
}

// OrderersConfig mocks base method
func (_m *MockEndpointConfig) OrderersConfig() ([]fab.OrdererConfig, error) {
	ret := _m.ctrl.Call(_m, "OrderersConfig")
	ret0, _ := ret[0].([]fab.OrdererConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderersConfig indicates an expected call of OrderersConfig
func (_mr *MockEndpointConfigMockRecorder) OrderersConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OrderersConfig", reflect.TypeOf((*MockEndpointConfig)(nil).OrderersConfig))
}

// PeerConfig mocks base method
func (_m *MockEndpointConfig) PeerConfig(_param0 string) (*fab.PeerConfig, error) {
	ret := _m.ctrl.Call(_m, "PeerConfig", _param0)
	ret0, _ := ret[0].(*fab.PeerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerConfig indicates an expected call of PeerConfig
func (_mr *MockEndpointConfigMockRecorder) PeerConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PeerConfig", reflect.TypeOf((*MockEndpointConfig)(nil).PeerConfig), arg0)
}

// PeerMSPID mocks base method
func (_m *MockEndpointConfig) PeerMSPID(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "PeerMSPID", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerMSPID indicates an expected call of PeerMSPID
func (_mr *MockEndpointConfigMockRecorder) PeerMSPID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PeerMSPID", reflect.TypeOf((*MockEndpointConfig)(nil).PeerMSPID), arg0)
}

// PeersConfig mocks base method
func (_m *MockEndpointConfig) PeersConfig(_param0 string) ([]fab.PeerConfig, error) {
	ret := _m.ctrl.Call(_m, "PeersConfig", _param0)
	ret0, _ := ret[0].([]fab.PeerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeersConfig indicates an expected call of PeersConfig
func (_mr *MockEndpointConfigMockRecorder) PeersConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PeersConfig", reflect.TypeOf((*MockEndpointConfig)(nil).PeersConfig), arg0)
}

// TLSCACertPool mocks base method
func (_m *MockEndpointConfig) TLSCACertPool(_param0 ...*x509.Certificate) (*x509.CertPool, error) {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TLSCACertPool", _s...)
	ret0, _ := ret[0].(*x509.CertPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TLSCACertPool indicates an expected call of TLSCACertPool
func (_mr *MockEndpointConfigMockRecorder) TLSCACertPool(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TLSCACertPool", reflect.TypeOf((*MockEndpointConfig)(nil).TLSCACertPool), arg0...)
}

// TLSClientCerts mocks base method
func (_m *MockEndpointConfig) TLSClientCerts() ([]tls.Certificate, error) {
	ret := _m.ctrl.Call(_m, "TLSClientCerts")
	ret0, _ := ret[0].([]tls.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TLSClientCerts indicates an expected call of TLSClientCerts
func (_mr *MockEndpointConfigMockRecorder) TLSClientCerts() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TLSClientCerts", reflect.TypeOf((*MockEndpointConfig)(nil).TLSClientCerts))
}

// Timeout mocks base method
func (_m *MockEndpointConfig) Timeout(_param0 fab.TimeoutType) time.Duration {
	ret := _m.ctrl.Call(_m, "Timeout", _param0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Timeout indicates an expected call of Timeout
func (_mr *MockEndpointConfigMockRecorder) Timeout(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Timeout", reflect.TypeOf((*MockEndpointConfig)(nil).Timeout), arg0)
}

// MockProposalProcessor is a mock of ProposalProcessor interface
type MockProposalProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProposalProcessorMockRecorder
}

// MockProposalProcessorMockRecorder is the mock recorder for MockProposalProcessor
type MockProposalProcessorMockRecorder struct {
	mock *MockProposalProcessor
}

// NewMockProposalProcessor creates a new mock instance
func NewMockProposalProcessor(ctrl *gomock.Controller) *MockProposalProcessor {
	mock := &MockProposalProcessor{ctrl: ctrl}
	mock.recorder = &MockProposalProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockProposalProcessor) EXPECT() *MockProposalProcessorMockRecorder {
	return _m.recorder
}

// ProcessTransactionProposal mocks base method
func (_m *MockProposalProcessor) ProcessTransactionProposal(_param0 context.Context, _param1 fab.ProcessProposalRequest) (*fab.TransactionProposalResponse, error) {
	ret := _m.ctrl.Call(_m, "ProcessTransactionProposal", _param0, _param1)
	ret0, _ := ret[0].(*fab.TransactionProposalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessTransactionProposal indicates an expected call of ProcessTransactionProposal
func (_mr *MockProposalProcessorMockRecorder) ProcessTransactionProposal(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ProcessTransactionProposal", reflect.TypeOf((*MockProposalProcessor)(nil).ProcessTransactionProposal), arg0, arg1)
}

// MockProviders is a mock of Providers interface
type MockProviders struct {
	ctrl     *gomock.Controller
	recorder *MockProvidersMockRecorder
}

// MockProvidersMockRecorder is the mock recorder for MockProviders
type MockProvidersMockRecorder struct {
	mock *MockProviders
}

// NewMockProviders creates a new mock instance
func NewMockProviders(ctrl *gomock.Controller) *MockProviders {
	mock := &MockProviders{ctrl: ctrl}
	mock.recorder = &MockProvidersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockProviders) EXPECT() *MockProvidersMockRecorder {
	return _m.recorder
}

// ChannelProvider mocks base method
func (_m *MockProviders) ChannelProvider() fab.ChannelProvider {
	ret := _m.ctrl.Call(_m, "ChannelProvider")
	ret0, _ := ret[0].(fab.ChannelProvider)
	return ret0
}

// ChannelProvider indicates an expected call of ChannelProvider
func (_mr *MockProvidersMockRecorder) ChannelProvider() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ChannelProvider", reflect.TypeOf((*MockProviders)(nil).ChannelProvider))
}

// DiscoveryProvider mocks base method
func (_m *MockProviders) DiscoveryProvider() fab.DiscoveryProvider {
	ret := _m.ctrl.Call(_m, "DiscoveryProvider")
	ret0, _ := ret[0].(fab.DiscoveryProvider)
	return ret0
}

// DiscoveryProvider indicates an expected call of DiscoveryProvider
func (_mr *MockProvidersMockRecorder) DiscoveryProvider() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DiscoveryProvider", reflect.TypeOf((*MockProviders)(nil).DiscoveryProvider))
}

// EndpointConfig mocks base method
func (_m *MockProviders) EndpointConfig() fab.EndpointConfig {
	ret := _m.ctrl.Call(_m, "EndpointConfig")
	ret0, _ := ret[0].(fab.EndpointConfig)
	return ret0
}

// EndpointConfig indicates an expected call of EndpointConfig
func (_mr *MockProvidersMockRecorder) EndpointConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EndpointConfig", reflect.TypeOf((*MockProviders)(nil).EndpointConfig))
}

// InfraProvider mocks base method
func (_m *MockProviders) InfraProvider() fab.InfraProvider {
	ret := _m.ctrl.Call(_m, "InfraProvider")
	ret0, _ := ret[0].(fab.InfraProvider)
	return ret0
}

// InfraProvider indicates an expected call of InfraProvider
func (_mr *MockProvidersMockRecorder) InfraProvider() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InfraProvider", reflect.TypeOf((*MockProviders)(nil).InfraProvider))
}

// LocalDiscoveryProvider mocks base method
func (_m *MockProviders) LocalDiscoveryProvider() fab.LocalDiscoveryProvider {
	ret := _m.ctrl.Call(_m, "LocalDiscoveryProvider")
	ret0, _ := ret[0].(fab.LocalDiscoveryProvider)
	return ret0
}

// LocalDiscoveryProvider indicates an expected call of LocalDiscoveryProvider
func (_mr *MockProvidersMockRecorder) LocalDiscoveryProvider() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LocalDiscoveryProvider", reflect.TypeOf((*MockProviders)(nil).LocalDiscoveryProvider))
}

// SelectionProvider mocks base method
func (_m *MockProviders) SelectionProvider() fab.SelectionProvider {
	ret := _m.ctrl.Call(_m, "SelectionProvider")
	ret0, _ := ret[0].(fab.SelectionProvider)
	return ret0
}

// SelectionProvider indicates an expected call of SelectionProvider
func (_mr *MockProvidersMockRecorder) SelectionProvider() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SelectionProvider", reflect.TypeOf((*MockProviders)(nil).SelectionProvider))
}
