// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-sdk-go/pkg/fabsdk (interfaces: SessionClientFactory)

// Package mock_fabsdk is a generated GoMock package.
package mock_fabsdk

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chclient "github.com/hyperledger/fabric-sdk-go/pkg/client/chclient"
	context "github.com/hyperledger/fabric-sdk-go/pkg/context"
)

// MockSessionClientFactory is a mock of SessionClientFactory interface
type MockSessionClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSessionClientFactoryMockRecorder
}

// MockSessionClientFactoryMockRecorder is the mock recorder for MockSessionClientFactory
type MockSessionClientFactoryMockRecorder struct {
	mock *MockSessionClientFactory
}

// NewMockSessionClientFactory creates a new mock instance
func NewMockSessionClientFactory(ctrl *gomock.Controller) *MockSessionClientFactory {
	mock := &MockSessionClientFactory{ctrl: ctrl}
	mock.recorder = &MockSessionClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionClientFactory) EXPECT() *MockSessionClientFactoryMockRecorder {
	return m.recorder
}

// NewChannelClient mocks base method
func (m *MockSessionClientFactory) NewChannelClient(arg0 context.Providers, arg1 context.SessionContext, arg2 string, arg3 context.TargetFilter) (*chclient.ChannelClient, error) {
	ret := m.ctrl.Call(m, "NewChannelClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*chclient.ChannelClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewChannelClient indicates an expected call of NewChannelClient
func (mr *MockSessionClientFactoryMockRecorder) NewChannelClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChannelClient", reflect.TypeOf((*MockSessionClientFactory)(nil).NewChannelClient), arg0, arg1, arg2, arg3)
}
