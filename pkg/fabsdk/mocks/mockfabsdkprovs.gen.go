// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-sdk-go/pkg/context (interfaces: CoreProviders,SvcProviders,Providers)

// Package mock_context is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "github.com/hyperledger/fabric-sdk-go/pkg/context"
	api "github.com/hyperledger/fabric-sdk-go/pkg/context/api"
	core "github.com/hyperledger/fabric-sdk-go/pkg/context/api/core"
	fab "github.com/hyperledger/fabric-sdk-go/pkg/context/api/fab"
)

// MockCoreProviders is a mock of CoreProviders interface
type MockCoreProviders struct {
	ctrl     *gomock.Controller
	recorder *MockCoreProvidersMockRecorder
}

// MockCoreProvidersMockRecorder is the mock recorder for MockCoreProviders
type MockCoreProvidersMockRecorder struct {
	mock *MockCoreProviders
}

// NewMockCoreProviders creates a new mock instance
func NewMockCoreProviders(ctrl *gomock.Controller) *MockCoreProviders {
	mock := &MockCoreProviders{ctrl: ctrl}
	mock.recorder = &MockCoreProvidersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoreProviders) EXPECT() *MockCoreProvidersMockRecorder {
	return m.recorder
}

// Config mocks base method
func (m *MockCoreProviders) Config() core.Config {
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(core.Config)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockCoreProvidersMockRecorder) Config() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockCoreProviders)(nil).Config))
}

// CryptoSuite mocks base method
func (m *MockCoreProviders) CryptoSuite() core.CryptoSuite {
	ret := m.ctrl.Call(m, "CryptoSuite")
	ret0, _ := ret[0].(core.CryptoSuite)
	return ret0
}

// CryptoSuite indicates an expected call of CryptoSuite
func (mr *MockCoreProvidersMockRecorder) CryptoSuite() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoSuite", reflect.TypeOf((*MockCoreProviders)(nil).CryptoSuite))
}

// FabricProvider mocks base method
func (m *MockCoreProviders) FabricProvider() context.FabricProvider {
	ret := m.ctrl.Call(m, "FabricProvider")
	ret0, _ := ret[0].(context.FabricProvider)
	return ret0
}

// FabricProvider indicates an expected call of FabricProvider
func (mr *MockCoreProvidersMockRecorder) FabricProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FabricProvider", reflect.TypeOf((*MockCoreProviders)(nil).FabricProvider))
}

// SigningManager mocks base method
func (m *MockCoreProviders) SigningManager() api.SigningManager {
	ret := m.ctrl.Call(m, "SigningManager")
	ret0, _ := ret[0].(api.SigningManager)
	return ret0
}

// SigningManager indicates an expected call of SigningManager
func (mr *MockCoreProvidersMockRecorder) SigningManager() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SigningManager", reflect.TypeOf((*MockCoreProviders)(nil).SigningManager))
}

// StateStore mocks base method
func (m *MockCoreProviders) StateStore() api.KVStore {
	ret := m.ctrl.Call(m, "StateStore")
	ret0, _ := ret[0].(api.KVStore)
	return ret0
}

// StateStore indicates an expected call of StateStore
func (mr *MockCoreProvidersMockRecorder) StateStore() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateStore", reflect.TypeOf((*MockCoreProviders)(nil).StateStore))
}

// MockSvcProviders is a mock of SvcProviders interface
type MockSvcProviders struct {
	ctrl     *gomock.Controller
	recorder *MockSvcProvidersMockRecorder
}

// MockSvcProvidersMockRecorder is the mock recorder for MockSvcProviders
type MockSvcProvidersMockRecorder struct {
	mock *MockSvcProviders
}

// NewMockSvcProviders creates a new mock instance
func NewMockSvcProviders(ctrl *gomock.Controller) *MockSvcProviders {
	mock := &MockSvcProviders{ctrl: ctrl}
	mock.recorder = &MockSvcProvidersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSvcProviders) EXPECT() *MockSvcProvidersMockRecorder {
	return m.recorder
}

// ChannelProvider mocks base method
func (m *MockSvcProviders) ChannelProvider() fab.ChannelProvider {
	ret := m.ctrl.Call(m, "ChannelProvider")
	ret0, _ := ret[0].(fab.ChannelProvider)
	return ret0
}

// ChannelProvider indicates an expected call of ChannelProvider
func (mr *MockSvcProvidersMockRecorder) ChannelProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelProvider", reflect.TypeOf((*MockSvcProviders)(nil).ChannelProvider))
}

// DiscoveryProvider mocks base method
func (m *MockSvcProviders) DiscoveryProvider() fab.DiscoveryProvider {
	ret := m.ctrl.Call(m, "DiscoveryProvider")
	ret0, _ := ret[0].(fab.DiscoveryProvider)
	return ret0
}

// DiscoveryProvider indicates an expected call of DiscoveryProvider
func (mr *MockSvcProvidersMockRecorder) DiscoveryProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryProvider", reflect.TypeOf((*MockSvcProviders)(nil).DiscoveryProvider))
}

// SelectionProvider mocks base method
func (m *MockSvcProviders) SelectionProvider() fab.SelectionProvider {
	ret := m.ctrl.Call(m, "SelectionProvider")
	ret0, _ := ret[0].(fab.SelectionProvider)
	return ret0
}

// SelectionProvider indicates an expected call of SelectionProvider
func (mr *MockSvcProvidersMockRecorder) SelectionProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectionProvider", reflect.TypeOf((*MockSvcProviders)(nil).SelectionProvider))
}

// MockProviders is a mock of Providers interface
type MockProviders struct {
	ctrl     *gomock.Controller
	recorder *MockProvidersMockRecorder
}

// MockProvidersMockRecorder is the mock recorder for MockProviders
type MockProvidersMockRecorder struct {
	mock *MockProviders
}

// NewMockProviders creates a new mock instance
func NewMockProviders(ctrl *gomock.Controller) *MockProviders {
	mock := &MockProviders{ctrl: ctrl}
	mock.recorder = &MockProvidersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviders) EXPECT() *MockProvidersMockRecorder {
	return m.recorder
}

// ChannelProvider mocks base method
func (m *MockProviders) ChannelProvider() fab.ChannelProvider {
	ret := m.ctrl.Call(m, "ChannelProvider")
	ret0, _ := ret[0].(fab.ChannelProvider)
	return ret0
}

// ChannelProvider indicates an expected call of ChannelProvider
func (mr *MockProvidersMockRecorder) ChannelProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelProvider", reflect.TypeOf((*MockProviders)(nil).ChannelProvider))
}

// Config mocks base method
func (m *MockProviders) Config() core.Config {
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(core.Config)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockProvidersMockRecorder) Config() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockProviders)(nil).Config))
}

// CryptoSuite mocks base method
func (m *MockProviders) CryptoSuite() core.CryptoSuite {
	ret := m.ctrl.Call(m, "CryptoSuite")
	ret0, _ := ret[0].(core.CryptoSuite)
	return ret0
}

// CryptoSuite indicates an expected call of CryptoSuite
func (mr *MockProvidersMockRecorder) CryptoSuite() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoSuite", reflect.TypeOf((*MockProviders)(nil).CryptoSuite))
}

// DiscoveryProvider mocks base method
func (m *MockProviders) DiscoveryProvider() fab.DiscoveryProvider {
	ret := m.ctrl.Call(m, "DiscoveryProvider")
	ret0, _ := ret[0].(fab.DiscoveryProvider)
	return ret0
}

// DiscoveryProvider indicates an expected call of DiscoveryProvider
func (mr *MockProvidersMockRecorder) DiscoveryProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryProvider", reflect.TypeOf((*MockProviders)(nil).DiscoveryProvider))
}

// FabricProvider mocks base method
func (m *MockProviders) FabricProvider() context.FabricProvider {
	ret := m.ctrl.Call(m, "FabricProvider")
	ret0, _ := ret[0].(context.FabricProvider)
	return ret0
}

// FabricProvider indicates an expected call of FabricProvider
func (mr *MockProvidersMockRecorder) FabricProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FabricProvider", reflect.TypeOf((*MockProviders)(nil).FabricProvider))
}

// SelectionProvider mocks base method
func (m *MockProviders) SelectionProvider() fab.SelectionProvider {
	ret := m.ctrl.Call(m, "SelectionProvider")
	ret0, _ := ret[0].(fab.SelectionProvider)
	return ret0
}

// SelectionProvider indicates an expected call of SelectionProvider
func (mr *MockProvidersMockRecorder) SelectionProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectionProvider", reflect.TypeOf((*MockProviders)(nil).SelectionProvider))
}

// SigningManager mocks base method
func (m *MockProviders) SigningManager() api.SigningManager {
	ret := m.ctrl.Call(m, "SigningManager")
	ret0, _ := ret[0].(api.SigningManager)
	return ret0
}

// SigningManager indicates an expected call of SigningManager
func (mr *MockProvidersMockRecorder) SigningManager() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SigningManager", reflect.TypeOf((*MockProviders)(nil).SigningManager))
}

// StateStore mocks base method
func (m *MockProviders) StateStore() api.KVStore {
	ret := m.ctrl.Call(m, "StateStore")
	ret0, _ := ret[0].(api.KVStore)
	return ret0
}

// StateStore indicates an expected call of StateStore
func (mr *MockProvidersMockRecorder) StateStore() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateStore", reflect.TypeOf((*MockProviders)(nil).StateStore))
}
