// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-sdk-go/pkg/context/api/identity (interfaces: RegistrarService,EnrollmentService,Manager,Providers)

// Package mock_identity is a generated GoMock package.
package mock_identity

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/hyperledger/fabric-sdk-go/pkg/context/api/core"
	identity "github.com/hyperledger/fabric-sdk-go/pkg/context/api/identity"
)

// MockRegistrarService is a mock of RegistrarService interface
type MockRegistrarService struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrarServiceMockRecorder
}

// MockRegistrarServiceMockRecorder is the mock recorder for MockRegistrarService
type MockRegistrarServiceMockRecorder struct {
	mock *MockRegistrarService
}

// NewMockRegistrarService creates a new mock instance
func NewMockRegistrarService(ctrl *gomock.Controller) *MockRegistrarService {
	mock := &MockRegistrarService{ctrl: ctrl}
	mock.recorder = &MockRegistrarServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistrarService) EXPECT() *MockRegistrarServiceMockRecorder {
	return m.recorder
}

// CAName mocks base method
func (m *MockRegistrarService) CAName() string {
	ret := m.ctrl.Call(m, "CAName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CAName indicates an expected call of CAName
func (mr *MockRegistrarServiceMockRecorder) CAName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAName", reflect.TypeOf((*MockRegistrarService)(nil).CAName))
}

// Register mocks base method
func (m *MockRegistrarService) Register(arg0 *identity.RegistrationRequest) (string, error) {
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockRegistrarServiceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrarService)(nil).Register), arg0)
}

// Revoke mocks base method
func (m *MockRegistrarService) Revoke(arg0 *identity.RevocationRequest) (*identity.RevocationResponse, error) {
	ret := m.ctrl.Call(m, "Revoke", arg0)
	ret0, _ := ret[0].(*identity.RevocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke
func (mr *MockRegistrarServiceMockRecorder) Revoke(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockRegistrarService)(nil).Revoke), arg0)
}

// MockEnrollmentService is a mock of EnrollmentService interface
type MockEnrollmentService struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentServiceMockRecorder
}

// MockEnrollmentServiceMockRecorder is the mock recorder for MockEnrollmentService
type MockEnrollmentServiceMockRecorder struct {
	mock *MockEnrollmentService
}

// NewMockEnrollmentService creates a new mock instance
func NewMockEnrollmentService(ctrl *gomock.Controller) *MockEnrollmentService {
	mock := &MockEnrollmentService{ctrl: ctrl}
	mock.recorder = &MockEnrollmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnrollmentService) EXPECT() *MockEnrollmentServiceMockRecorder {
	return m.recorder
}

// CAName mocks base method
func (m *MockEnrollmentService) CAName() string {
	ret := m.ctrl.Call(m, "CAName")
	ret0, _ := ret[0].(string)
	return ret0
}

// CAName indicates an expected call of CAName
func (mr *MockEnrollmentServiceMockRecorder) CAName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CAName", reflect.TypeOf((*MockEnrollmentService)(nil).CAName))
}

// Enroll mocks base method
func (m *MockEnrollmentService) Enroll(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Enroll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enroll indicates an expected call of Enroll
func (mr *MockEnrollmentServiceMockRecorder) Enroll(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enroll", reflect.TypeOf((*MockEnrollmentService)(nil).Enroll), arg0, arg1)
}

// Reenroll mocks base method
func (m *MockEnrollmentService) Reenroll(arg0 string) error {
	ret := m.ctrl.Call(m, "Reenroll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reenroll indicates an expected call of Reenroll
func (mr *MockEnrollmentServiceMockRecorder) Reenroll(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reenroll", reflect.TypeOf((*MockEnrollmentService)(nil).Reenroll), arg0)
}

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetSigningIdentity mocks base method
func (m *MockManager) GetSigningIdentity(arg0 string) (*identity.SigningIdentity, error) {
	ret := m.ctrl.Call(m, "GetSigningIdentity", arg0)
	ret0, _ := ret[0].(*identity.SigningIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSigningIdentity indicates an expected call of GetSigningIdentity
func (mr *MockManagerMockRecorder) GetSigningIdentity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningIdentity", reflect.TypeOf((*MockManager)(nil).GetSigningIdentity), arg0)
}

// GetUser mocks base method
func (m *MockManager) GetUser(arg0 string) (core.User, error) {
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockManagerMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockManager)(nil).GetUser), arg0)
}

// MockProviders is a mock of Providers interface
type MockProviders struct {
	ctrl     *gomock.Controller
	recorder *MockProvidersMockRecorder
}

// MockProvidersMockRecorder is the mock recorder for MockProviders
type MockProvidersMockRecorder struct {
	mock *MockProviders
}

// NewMockProviders creates a new mock instance
func NewMockProviders(ctrl *gomock.Controller) *MockProviders {
	mock := &MockProviders{ctrl: ctrl}
	mock.recorder = &MockProvidersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviders) EXPECT() *MockProvidersMockRecorder {
	return m.recorder
}

// IdentityProvider mocks base method
func (m *MockProviders) IdentityProvider() identity.Provider {
	ret := m.ctrl.Call(m, "IdentityProvider")
	ret0, _ := ret[0].(identity.Provider)
	return ret0
}

// IdentityProvider indicates an expected call of IdentityProvider
func (mr *MockProvidersMockRecorder) IdentityProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityProvider", reflect.TypeOf((*MockProviders)(nil).IdentityProvider))
}
